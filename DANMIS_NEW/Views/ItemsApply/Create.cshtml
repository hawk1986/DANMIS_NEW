@model ItemsApplyViewModel
@{
    var auth = UnobtrusiveSession.Session["Auth"] as IList<Auth>;
    var action = ViewContext.RouteData.Values["action"] as string;
    var function = auth.First(x => x.Code == "ItemsApply" + action);
    ViewBag.Title = function.ModuleName + " / " + function.GroupName + " / " + function.SimpleName;
}
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script>

    $('#ItemClass.selectpicker').change(function () {
        var itemClass = $('#ItemClass.selectpicker').val();
        $.ajax({
            cache: false,
            type: 'POST',
            url: '@Url.Action("GetSelectList", "FactoryItems")',
            data: JSON.stringify({ 'itemClass': itemClass }),
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            success: function (result) {
                if (result.result) {
                    var select = $('#ItemID');
                    select = '<option value="">@string.Format(Resource.PleaseSelect, Resource.Item)</option>';
                    result.items.forEach(x => select += '<option value="' + x.Value + '">' + x.Text + '</option>');
                    $('#ItemID.selectpicker').html(select).selectpicker('refresh');
                }
            },
            error: function () {
                //alert(3);
            }
        });
    });

    $('#ItemID.selectpicker').change(function () {
        var itemID = $('#ItemID.selectpicker').val();
        $.ajax({
            cache: false,
            type: 'POST',
            url: '@Url.Action("GetItemPic", "FactoryItems")',
            data: JSON.stringify({ 'itemID': itemID }),
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            success: function (result) {
                if (result.result) {
                    $('#pic').attr('src', result.picPath);
                }
                else {
                    $('#pic').removeAttr('src');
                }
            },
            error: function () {

            }
        });

    });
    var _itemID = $('#ItemID.selectpicker').val();
    if (_itemID != '') {
        $.ajax({
            cache: false,
            type: 'POST',
            url: '@Url.Action("GetItemPic", "FactoryItems")',
            data: JSON.stringify({ 'itemID': _itemID }),
            contentType: "application/json; charset=utf-8",
            dataType: 'json',
            success: function (result) {
                if (result.result) {
                    $('#pic').attr('src', result.picPath);
                }
                else {
                    $('#pic').removeAttr('src');
                }
            },
            error: function () {

            }
        });
    }


</script>
}
<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-lg-12">
        <ol class="breadcrumb">
            <li>
                <a href="#">@function.ModuleName</a>
            </li>
            <li>
                @Html.ActionLink(function.GroupName, "Index")
            </li>
            <li class="active">
                <strong>@function.SimpleName</strong>
            </li>
        </ol>
    </div>
</div>
<div class="wrapper wrapper-content animated">
    <div class="row">
        <div class="col-sm-12">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    @using (Html.BeginForm(action, "ItemsApply", FormMethod.Post, new { @class = "form-horizontal", role = "form", id = "create_form" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(model => model.SequenceNo)
                        @Html.HiddenFor(model => model.ID)
                        @Html.HiddenFor(model => model.ApplyWDID)
                        @Html.HiddenFor(model => model.ApplyBrand)
                        @Html.HiddenFor(model => model.Status)

                        <div class="form-group">
                            @Html.LabelFor(model => model.ItemID, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-2">
                                @Html.DropDownListFor(model => model.ItemClass, Model.ItemClassList, string.Format(Resource.PleaseSelect, Resource.ItemClass), new { @class = "form-control selectpicker" })
                                @Html.ValidationMessageFor(model => model.ItemClass, "", new { @class = "text-danger" })
                            </div>
                            <div class="col-sm-3">
                                @Html.DropDownListFor(model => model.ItemID, Model.ItemList, string.Format(Resource.PleaseSelect, Resource.Item), new { @class = "form-control selectpicker", data_live_search = "true", data_size = "10" })
                                @Html.ValidationMessageFor(model => model.ItemID, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.Label(" ", htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-3">
                                <img id="pic" class="imagesize" src="" style="width:auto;" />
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-1">
                                @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Memo, htmlAttributes: new { @class = "control-label col-sm-2" })
                            <div class="col-sm-3">
                                @Html.EditorFor(model => model.Memo, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Memo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <button type="submit" id="form_submit" class="btn btn-primary"><i class="fa fa-plus"></i> @Resource.Save</button>
                                <a id="exit_btn" href="@Url.Action("Index")" class="btn btn-danger"><i class="fa fa-sign-out"></i> @Resource.Exit</a>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

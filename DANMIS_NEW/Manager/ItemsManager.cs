#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 05/03/2021 15:16:40
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities.Extensions;
using DANMIS_NEW.Interface;
using DANMIS_NEW.Models;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using ResourceLibrary;

namespace DANMIS_NEW.Manager
{
    public class ItemsManager : IItemsManager
    {
        readonly IItemsRepository _itemsRepository;
        readonly IFactoryRepository _factoryRepository;
        readonly IFactoryItemsRepository _factoryItemsRepository;

        public ItemsManager(IItemsRepository itemsRepository, IFactoryRepository factoryRepository, IFactoryItemsRepository factoryItemsRepository)
        {
            _itemsRepository = itemsRepository;
            _factoryRepository = factoryRepository;
            _factoryItemsRepository = factoryItemsRepository;
        }

        /// <summary>
        /// 建立 Items
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(ItemsViewModel entity)
        {
            var item = (Items)entity;

            using (var transaction = _itemsRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    _itemsRepository.Create(item);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 Items
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _itemsRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _itemsRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _itemsRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 取得 Items
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ItemsViewModel GetByID(Guid id)
        {
            var item = _itemsRepository.GetByID(id);
            var result = (ItemsViewModel)item;

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<ItemsListResult> Paging(ItemsSearchModel searchModel)
        {
            var factories = _factoryRepository.GetAll().ToList();
            var factoryItems = _factoryItemsRepository.GetAll().ToList();

            // 預設集合
            var temp = _itemsRepository.GetAll();

            // 將 DB 資料轉換為列表頁呈現資料
            var tempResult = from x in temp
                             select new ItemsListResult
                             {
                                 SequenceNo = x.SequenceNo,
                                 ID = x.ID,
                                 FactoryID = x.FactoryID,
                                 FactoryItemID = x.FactoryItemID,
                                 ItemNO = x.ItemNO,
                                 ItemName = x.ItemName,
                                 ItemUnit = x.ItemUnit,
                                 ItemPrice = x.ItemPrice,
                                 ItemQty = x.ItemQty,
                                 IsShow = x.IsShow,
                                 IsDeleted = x.IsDeleted,
                                 UpdateUser = x.UpdateUser,
                                 UpdateTime = x.UpdateTime,
                                 FactoryName = string.Empty,
                                 FactoryItemName = string.Empty,
                             };

            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.FactoryName.Contains(search) ||
                    x.FactoryItemName.Contains(search) ||
                    x.ItemNO.Contains(search) ||
                    x.ItemName.Contains(search) ||
                    x.ItemUnit.Contains(search) ||
                    x.UpdateUser.Contains(search) ||
                    false);
            }

            if (searchModel.FactoryItemID.HasValue)
                tempResult = tempResult.Where(x =>
                    x.FactoryItemID == searchModel.FactoryItemID ||
                    false);

            // 進行分頁處理
            var result = new Paging<ItemsListResult>();
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            foreach (var item in result.rows)
            {
                item.FactoryName = factories.FirstOrDefault(x => x.ID == item.FactoryID)?.FactoryShortName ?? string.Empty;
                item.FactoryItemName = factoryItems.FirstOrDefault(x => x.ID == item.FactoryItemID)?.ItemName ?? string.Empty;
            }

            return result;
        }

        /// <summary>
        /// 更新 Items
        /// </summary>
        /// <param name="entity"></param>
        public void Update(ItemsViewModel entity)
        {
            using (var transaction = _itemsRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _itemsRepository.GetByID(entity.ID);
                    source.FactoryID = entity.FactoryID;
                    source.FactoryItemID = entity.FactoryItemID;
                    source.ItemNO = entity.ItemNO ?? string.Empty;
                    source.ItemName = entity.ItemName ?? string.Empty;
                    source.ItemUnit = entity.ItemUnit ?? string.Empty;
                    source.ItemPrice = entity.ItemPrice;
                    source.ItemQty = entity.ItemQty;
                    source.IsShow = entity.IsShow;
                    source.IsDeleted = entity.IsDeleted;
                    source.UpdateUser = entity.UpdateUser ?? string.Empty;
                    source.UpdateTime = entity.UpdateTime;

                    _itemsRepository.Update(source);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }
    }
}
#pragma warning restore 1591
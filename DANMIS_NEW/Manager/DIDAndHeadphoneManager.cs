#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Generated at 05/07/2021 15:38:15
//     Runtime Version: 4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using Utilities.Extensions;
using DANMIS_NEW.Interface;
using DANMIS_NEW.Models;
using DANMIS_NEW.ViewModel;
using DANMIS_NEW.ViewModel.ListResult;
using DANMIS_NEW.ViewModel.SearchModel;
using ResourceLibrary;

namespace DANMIS_NEW.Manager
{
    public class DIDAndHeadphoneManager : IDIDAndHeadphoneManager
    {
        readonly IDIDAndHeadphoneRepository _dIDAndHeadphoneRepository;
        readonly IUserRepository _userRepository;
        readonly IDIDRepository _dIDRepository;
        readonly IHeadphoneRepository _headphoneRepository;
        public DIDAndHeadphoneManager(IDIDAndHeadphoneRepository dIDAndHeadphoneRepository, IUserRepository userRepository, IDIDRepository dIDRepository, IHeadphoneRepository headphoneRepository)
        {
            _dIDAndHeadphoneRepository = dIDAndHeadphoneRepository;
            _userRepository = userRepository;
            _dIDRepository = dIDRepository;
            _headphoneRepository = headphoneRepository;
        }

        /// <summary>
        /// 建立 DIDAndHeadphone
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public void Create(DIDAndHeadphoneViewModel entity)
        {
            var item = (DIDAndHeadphone)entity;

            using (var transaction = _dIDAndHeadphoneRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    _dIDAndHeadphoneRepository.Create(item);
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 刪除 DIDAndHeadphone
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public void Delete(List<Guid> id)
        {
            using (var transaction = _dIDAndHeadphoneRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var itemSet = _dIDAndHeadphoneRepository.Where(x => id.Contains(x.ID)).ToList();
                    if (itemSet.Any())
                    {
                        foreach (var item in itemSet)
                        {
                            _dIDAndHeadphoneRepository.Delete(item);
                        }
                    }
                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }

        /// <summary>
        /// 根據 id 取得 DIDAndHeadphone
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public DIDAndHeadphoneViewModel GetByID(Guid id)
        {
            
            var item = _dIDAndHeadphoneRepository.GetByID(id);

            var result = (DIDAndHeadphoneViewModel)item;
            var user = _userRepository.GetAll().FirstOrDefault(x => x.WDID == result.WDID);

            result.User.Name = user.Name;
            result.User.Email = user.Email;
            result._EffectiveDate = result.EffectiveDate == new DateTime(1900, 1, 1, 0, 0, 0) ? string.Empty : item.EffectiveDate.ToString();

            return result;
        }

        /// <summary>
        /// 分頁
        /// </summary>
        /// <param name="searchModel"></param>
        /// <returns></returns>
        public Paging<DIDAndHeadphoneListResult> Paging(DIDAndHeadphoneSearchModel searchModel)
        {
            // 預設集合
            var temp = _dIDAndHeadphoneRepository.GetAll();

            // 將 DB 資料轉換為列表頁呈現資料
            var tempResult = from x in temp
                             select new DIDAndHeadphoneListResult
                             {
                                 SequenceNo = x.SequenceNo,
                                 ID = x.ID,
                                 DID = x.DID,
                                 HeadphoneNumber = x.HeadphoneNumber,
                                 Brand = x.Brand,
                                 WDID = x.WDID,
                                 User = string.Empty,
                                 Email = string.Empty,
                                 Status = x.Status,
                                 EffectiveDate = x.EffectiveDate,
                                 _EffectiveDate = x.EffectiveDate == new DateTime(1900, 1, 1, 0, 0 ,0) ? string.Empty : x.EffectiveDate.ToString(),
                                 UpdateUser = x.UpdateUser,
                                 UpdateTime = x.UpdateTime,
                             }; 

            // 如有篩選條件，進行篩選
            if (!string.IsNullOrWhiteSpace(searchModel.Search))
            {
                var search = searchModel.Search.ToLower();
                tempResult = tempResult.Where(x =>
                    x.DID.Contains(search) ||
                    x.HeadphoneNumber.Contains(search) ||
                    x.Brand.Contains(search) ||
                    x.WDID.Contains(search) ||
                    x.Status.Contains(search) ||
                    x.UpdateUser.Contains(search) ||
                    false);
            }

            // 進行分頁處理
            var result = new Paging<DIDAndHeadphoneListResult>();
            result.total = tempResult.Count();
            result.rows = tempResult
                .OrderBy(searchModel.Sort, searchModel.Order)
                .Skip(searchModel.Offset)
                .Take(searchModel.Limit)
                .ToList();

            foreach (var item in result.rows)
            {
                var user = _userRepository.GetAll().FirstOrDefault(x => x.WDID == item.WDID);
                item.User = user.LocEngName;
                item.Email = user.Email;
            }

            return result;
        }

        /// <summary>
        /// 更新 DIDAndHeadphone
        /// </summary>
        /// <param name="entity"></param>
        public void Update(DIDAndHeadphoneViewModel entity)
        {
            using (var transaction = _dIDAndHeadphoneRepository.dbContext.Database.BeginTransaction())
            {
                try
                {
                    var source = _dIDAndHeadphoneRepository.GetByID(entity.ID);
                    source.DID = entity.DID ?? string.Empty;
                    source.HeadphoneNumber = entity.HeadphoneNumber ?? string.Empty;
                    source.Brand = entity.Brand ?? string.Empty;
                    source.WDID = entity.WDID ?? string.Empty;
                    source.Status = entity.Status ?? string.Empty;
                    source.EffectiveDate = entity.EffectiveDate;
                    source.UpdateUser = entity.UpdateUser ?? string.Empty;
                    source.UpdateTime = entity.UpdateTime;

                    _dIDAndHeadphoneRepository.Update(source);

                    // 回寫到 DID & Headphone
                    var did = _dIDRepository.GetAll().FirstOrDefault(x => x.DID1 == source.DID);
                    if (did != null)
                    {
                        did.WDID = source.WDID;
                        _dIDRepository.Update(did);
                    }

                    var headphone = _headphoneRepository.GetAll().FirstOrDefault(x => x.HeadphoneNumber == source.HeadphoneNumber);
                    if (headphone != null)
                    {
                        headphone.WDID = source.WDID;
                        headphone.Status = "0";
                        _headphoneRepository.Update(headphone);
                    }

                    transaction.Commit();
                }
                catch
                {
                    transaction.Rollback();
                    throw;
                }
            }
        }
    }
}
#pragma warning restore 1591